#!/bin/bash

mount -t proc none /proc
mount -t sysfs none /sys

mkdir -p /run
mount -t tmpfs -o "nosuid,size=20%,mode=0755" tmpfs /run

if ! mount -t devtmpfs -o size=$tmpfs_size,mode=0755 udev /dev; then
	echo "W: devtmpfs not available, falling back to tmpfs for /dev"
	mount -t tmpfs -o size=$tmpfs_size,mode=0755 udev /dev
	mknod -m 0600 /dev/console c 5 1
	mknod /dev/null c 1 3
fi
mkdir /dev/pts
mount -t devpts -o noexec,nosuid,gid=5,mode=0620 devpts /dev/pts || true


RESIZEERROR=0;
INITIALBOOT=0;

declare -A CONFIG;
CONFIG['rootfstype']="ext4";
CONFIG['rootfsopts']="noatime";
CONFIG['root']="/dev/mmcblk0p2";
CONFIG['noresizesd']=0;
CONFIG['noswapfile']=0;

CMDLINE=($(cat /proc/cmdline));
for OPTION in ${CMDLINE[@]}; do
	if [[ $OPTION =~ "=" ]]; then
		VALUE=$(printf "%b" ${OPTION##*=});
		CONFIG[${OPTION%%=*}]="$VALUE"
	else
		CONFIG[$OPTION]=1;
	fi
done

if [ -z "$CONFIG['splash']" ]; then 
	touch /run/nosplash
fi

# check if new root partition exists
X=0;
while [ ! -b "${CONFIG['root']}" ] && [ ${X} -lt 10 ]; do
	X=$(($X+1));
	mdev -s
	sleep 1;
done;

if [ ! -b "${CONFIG['root']}" ]; then
	echo "Root partition ${CONFIG['root']} missing"
	exec /bin/bash
	exit 0
fi

# resize root partition
if [ ${CONFIG['noresizesd']} -eq 0 ]; then

	CONFIG['rootdev']=${CONFIG['root']%%[0-9]}
	CONFIG['rootdev']=${CONFIG['rootdev']%%p}

	pSIZE=$(/sbin/sfdisk -s ${CONFIG['root']})
	echo ",+,,," | /sbin/sfdisk -uM -N2 --force -q ${CONFIG['rootdev']} 2&>/dev/null

	nSIZE=$(/sbin/sfdisk -s ${CONFIG['root']})

	test "$pSIZE" -eq "$nSIZE" && RESIZEERROR='1'
fi	

# mount root partition
mount -t ${CONFIG['rootfstype']} -o rw,${CONFIG['rootfsopts']} ${CONFIG['root']} /rootfs
if [ $? -ne 0 ]; then
	echo "Mounting root partition ${CONFIG['root']} failed"
	exec /bin/bash
	exit 0
fi


# check if we are in the initialboot
if [ -f /rootfs/root/initialboot ]; then
	INITIALBOOT=1;
	rm /rootfs/root/initialboot;
	if [ -n "${CONFIG['splash']}" ]; then
		/rootfs/usr/bin/splash --infinitebar --msgtxt="initial setup..."
	fi
fi

if [ $RESIZEERROR -eq 0 -a ! -e /rootfs/root/.resized ] && [ ${CONFIG['noresizesd']} -eq 0 ]; then

	# resize root partition
	if [ -n "${CONFIG['splash']}" ]; then
		if [ $INITIALBOOT -eq 0 ]; then
			/rootfs/usr/bin/splash --infinitebar --msgtxt="resizing sd..."
		fi
	else
echo '
8888888b.  8888888888  .d8888b.  8888888 8888888888P 8888888 888b    888  .d8888b.
888   Y88b 888        d88P  Y88b   888         d88P    888   8888b   888 d88P  Y88b
888    888 888        Y88b.        888        d88P     888   88888b  888 888    888
888   d88P 8888888     "Y888b.     888       d88P      888   888Y88b 888 888
8888888P"  888            "Y88b.   888      d88P       888   888 Y88b888 888  88888
888 T88b   888              "888   888     d88P        888   888  Y88888 888    888
888  T88b  888        Y88b  d88P   888    d88P         888   888   Y8888 Y88b  d88P
888   T88b 8888888888  "Y8888P"  8888888 d8888888888 8888888 888    Y888  "Y8888P88';
	fi

	/rootfs/sbin/resize2fs ${CONFIG['root']}
	touch /rootfs/root/.resized

fi

# create swapfile
if [ ! -f /rootfs/var/swapfile ] && [ $RESIZEERROR -eq 0 ] && [ ${CONFIG['noswapfile']} -eq 0 ]; then
	if [ -n "${CONFIG['splash']}" ]; then
		if [ $INITIALBOOT -eq 0 ]; then
			/rootfs/usr/bin/splash --infinitebar --msgtxt="creating swapfile..."
		fi
		dd if=/dev/zero of=/rootfs/var/swapfile bs=1024 count=128000
	else
echo '
       d8888 8888888b.  8888888b.     .d8888b.  888       888        d8888 8888888b.
      d88888 888  "Y88b 888  "Y88b   d88P  Y88b 888   o   888       d88888 888   Y88b
     d88P888 888    888 888    888   Y88b.      888  d8b  888      d88P888 888    888
    d88P 888 888    888 888    888    "Y888b.   888 d888b 888     d88P 888 888   d88P
   d88P  888 888    888 888    888       "Y88b. 888d88888b888    d88P  888 8888888P"
  d88P   888 888    888 888    888         "888 88888P Y88888   d88P   888 888
 d8888888888 888  .d88P 888  .d88P   Y88b  d88P 8888P   Y8888  d8888888888 888
d88P     888 8888888P"  8888888P"     "Y8888P"  888P     Y888 d88P     888 888';
		dd if=/dev/zero of=/rootfs/var/swapfile bs=1024 count=128000
	fi
	mkswap /rootfs/var/swapfile &>/dev/null
	swapon -p 0 /rootfs/var/swapfile &>/dev/null
fi

# continue with normal boot
if [ -n "${CONFIG['splash']}" ]; then
	/rootfs/usr/bin/splash --percentagebar --percentage=12 --msgtxt="loading...";
	# give splash time to settle
	sleep 1;
fi

if [ -d "/rootfs/lib/modules/$(uname -r)" ]; then
	# load rpi core module to initialize eth0
	ln -s "/rootfs/lib/modules/$(uname -r)" /lib/modules/
	ln -s /rootfs/lib/firmware /lib/

	modprobe smsc95xx

	# load additional user kernel modules
	if [ -f /rootfs/etc/modules ]; then
		while read MODULE; do
			if [ ! -z $(echo $MODULE | sed -e '/^#/d') ]; then
				modprobe $MODULE
			fi
		done < /rootfs/etc/modules
	fi

	if [ ! -z "${CONFIG['network.wlan0.module']}" ]; then
		modprobe ${CONFIG['network.wlan0.module']}
	fi
	sleep 1;

	if [ "${CONFIG['network.wlan0.mode']}" == "dhcp" ] && [ ! -z ${CONFIG['network.wlan0.ssid']} ] && [ ! -z ${CONFIG['network.wlan0.protection']} ]; then
		# remove wlan0 entry in network configuration
                awk '/wlan0/ {flag=1} /eth0/{flag=0} !flag{print}' /rootfs/etc/network/interfaces > /rootfs/etc/network/interfaces.new
		mv /rootfs/etc/network/interfaces.new /rootfs/etc/network/interfaces

		# connect wlan0 to dhcp server
		if [ "${CONFIG['network.wlan0.protection']}" == "WPA" ] || [ "${CONFIG['network.wlan0.protection']}" == "WPA2" ]; then
	                echo -e "allow-hotplug wlan0\niface wlan0 inet dhcp\nwpa-ssid \"${CONFIG['network.wlan0.ssid']}\"\nwpa-psk \"${CONFIG['network.wlan0.password']}\"\n" >> /rootfs/etc/network/interfaces
			if [ ! -d /rootfs/root/wpa_supplicant ]; then
				mkdir /rootfs/root/wpa_supplicant;
			fi
			echo -e "ctrl_interface=/rootfs/root/wpa_supplicant\nupdate_config=1\nnetwork={\nssid=\"${CONFIG['network.wlan0.ssid']}\"\npsk=\"${CONFIG['network.wlan0.password']}\"\nkey_mgmt=WPA-PSK\nproto=RSN WPA\npairwise=CCMP TKIP\ngroup=CCMP TKIP\n}" > /etc/wpa_supplicant/wpa_supplicant.conf
			echo -e "ctrl_interface=/root/wpa_supplicant\nupdate_config=1\nnetwork={\nssid=\"${CONFIG['network.wlan0.ssid']}\"\npsk=\"${CONFIG['network.wlan0.password']}\"\nkey_mgmt=WPA-PSK\nproto=RSN WPA\npairwise=CCMP TKIP\ngroup=CCMP TKIP\n}" > /rootfs/etc/wpa_supplicant/wpa_supplicant.conf
		elif [ "${CONFIG['network.wlan0.protection']}" == "WEP" ]; then
	                echo -e "allow-hotplug wlan0\niface wlan0 inet dhcp\nwireless-ssid ${CONFIG['network.wlan0.ssid']}\nwireless-key ${CONFIG['network.wlan0.password']}\n" >> /rootfs/etc/network/interfaces
		elif [ "${CONFIG['network.wlan0.protection']}" == "open" ]; then
                	echo -e "allow-hotplug wlan0\niface wlan0 inet dhcp\nwireless-ssid ${CONFIG['network.wlan0.protection']}\nwireless-mode managed\n" >> /rootfs/etc/network/interfaces
		fi
	fi

	if [ "${CONFIG['network.eth0.mode']}" == "dhcp" ]; then
		# remove eth0 entry in network configuration
		awk '/eth0/ {flag=1} /wlan0/{flag=0} !flag{print}' /rootfs/etc/network/interfaces > /rootfs/etc/network/interfaces.new
		mv /rootfs/etc/network/interfaces.new /rootfs/etc/network/interfaces

		# connect eth0 to dhcp server
		echo -e "iface eth0 inet dhcp\n" >> /rootfs/etc/network/interfaces
	elif [ "${CONFIG['network.eth0.mode']}" == "static" ] && [ ! -z ${CONFIG['network.eth0.address']} ] && [ ! -z ${CONFIG['network.eth0.gateway']} ] && [ ! -z ${CONFIG['network.eth0.netmask']} ]; then
		# remove eth0 entry in network configuration
		awk '/eth0/ {flag=1} /wlan0/{flag=0} !flag{print}' /rootfs/etc/network/interfaces > /rootfs/etc/network/interfaces.new
		mv /rootfs/etc/network/interfaces.new /rootfs/etc/network/interfaces

		# connect eth0 with an static ip
		echo -e "iface eth0 inet static\naddress ${CONFIG['network.eth0.address']}\nnetmask ${CONFIG['network.eth0.netmask']}\ngateway ${CONFIG['network.eth0.gateway']}\n" >> /rootfs/etc/network/interfaces
	fi

	cp /rootfs/etc/network/interfaces /etc/network/

	if [ "${CONFIG['network.eth0.mode']}" == "dhcp" ]; then
		udhcpc -i eth0 -s /etc/udhcpc/default.script -t 5 -T 5 -b
	elif [ "${CONFIG['network.eth0.mode']}" == "static" ] && [ ! -z ${CONFIG['network.eth0.address']} ] && [ ! -z ${CONFIG['network.eth0.gateway']} ] && [ ! -z ${CONFIG['network.eth0.netmask']} ]; then
		ifconfig eth0 up
	fi

fi

echo > /sys/kernel/uevent_helper

UDEV_ROOT=/dev \
udevd --daemon --resolve-names=never

udevadm trigger --action=add
udevadm settle || true
echo "Moving "

mount -n -o move /dev /rootfs/dev
mount -n -o move /run /rootfs/run
mount -n -o move /sys /rootfs/sys
mount -n -o move /proc /rootfs/proc

exec switch_root /rootfs /sbin/init

echo "Failed to switch_root, dropping to a shell"
exec /bin/bash
